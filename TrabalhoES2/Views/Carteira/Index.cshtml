@using Microsoft.AspNetCore.Mvc.TagHelpers
@using TrabalhoES2.Services
@model TrabalhoES2.Models.Carteira

@{
    ViewData["Title"] = "Minha Carteira";
    var iniciais = Model.Ativofinanceiros;
    var isTestMode = Context.Request.Query["testmode"] == "1";
}

@* --- DEBUG: Show user and auth info at the very top for Selenium diagnosis --- *@
@if (isTestMode)
{
    <div id="testmode-debug-block" style="background: #ffe; border: 2px solid #cc0; padding: 8px; margin-bottom: 10px;">
        <b>TEST MODE DEBUG:</b>
        <ul>
            <li>designacaoInput: <span id="debug-designacaoInput"></span></li>
            <li>tipoSelect: <span id="debug-tipoSelect"></span></li>
            <li>montanteInput: <span id="debug-montanteInput"></span></li>
            <li>Form visible: <span id="debug-filter-form-visible"></span></li>
        </ul>
        <script>
            function checkField(id) {
                var el = document.getElementById(id);
                if (!el) return 'not present';
                var style = getComputedStyle(el);
                return (style.display !== 'none' && style.visibility !== 'hidden' && el.offsetParent !== null) ? 'visible' : 'hidden';
            }
            document.getElementById('debug-designacaoInput').innerText = checkField('designacaoInput');
            document.getElementById('debug-tipoSelect').innerText = checkField('tipoSelect');
            document.getElementById('debug-montanteInput').innerText = checkField('montanteInput');
            var form = document.getElementById('filterForm');
            document.getElementById('debug-filter-form-visible').innerText = (form && getComputedStyle(form).display !== 'none' && form.offsetParent !== null) ? 'yes' : 'no';
        </script>
    </div>
}

@* --- DEBUG: Show user, auth, and query info at top for Selenium diagnosis --- *@
@if (Context.Request.Query["testmode"] == "1")
{
    <div style="background:#d1ecf1;color:#0c5460;padding:8px 12px;border-radius:6px;margin-bottom:12px;font-size:0.95em;z-index:9999;position:relative;">
        <b>[DEBUG]</b> User: <code>@(User?.Identity?.Name ?? "(none)")</code> | Authenticated: <code>@(User?.Identity?.IsAuthenticated ?? false)</code><br>
        <b>Current URL:</b> <code>@Context.Request.Path@Context.Request.QueryString</code><br>
        <b>Model.Ativofinanceiros.Count:</b> <code>@(Model?.Ativofinanceiros?.Count ?? 0)</code><br>
        <b>Filter form should be visible below if authenticated and carteira exists.</b>
    </div>
}

@* DEBUG: Show if Selenium user and asset are present *@
@if (User.Identity != null && User.Identity.IsAuthenticated && User.Identity.Name == "tf@ipvc.pt" && Model.Ativofinanceiros != null && Model.Ativofinanceiros.Any())
{
    <div class="alert alert-success">[DEBUG] Selenium user and at least one asset are present in the database.</div>
}

@* — estilos isolados para a view Minha Carteira *@
<style>
  .page-header {
    margin-bottom: 2rem;
    color: #0069d9;
    text-shadow: 1px 1px 2px rgba(0,0,0,.1);
  }
  .actions, .report-actions {
    display: flex;
    flex-wrap: wrap;
    gap: .75rem;
    margin-bottom: 1.5rem;
  }
  .filter-card, .table-card {
    border-radius: 1rem;
    box-shadow: 0 4px 16px rgba(0,0,0,.05);
    margin-bottom: 2rem;
  }
  .filter-card .card-header, .report-card .card-header {
    background: linear-gradient(135deg, #17a2b8, #117a8b);
    color: #fff;
    font-weight: 600;
  }
  .filter-card .form-control,
  .report-card .form-control {
    border-radius: .5rem;
  }
  .table-card .card-header {
    background: linear-gradient(135deg, #0052D4, #4364F7);
    color: #fff;
  }
  .table-card .table thead th {
    border-bottom: 2px solid #dee2e6;
  }
  .table-card .table-hover tbody tr:hover {
    background: rgba(0,82,212,.05);
  }
  .badge-type {
    font-size: .85rem;
    text-transform: uppercase;
  }
</style>

<h1 class="page-header">@ViewData["Title"]</h1>

@if (TempData["Mensagem"] != null)
{
  <div class="alert alert-info">
    @TempData["Mensagem"]
  </div>
}

<div class="actions">
  <a asp-action="SelecionarRelatorio" asp-controller="Carteira" asp-route-id="@Model.CarteiraId" class="btn btn-info">
    <i class="fas fa-file-alt me-1"></i> Gerar Relatório
  </a>
  <a asp-action="AtivosCatalogo" class="btn btn-primary">
    <i class="fas fa-th-list me-1"></i> Ver Ativos Disponíveis
  </a>
</div>

@* Relatório rápido *@
<div class="card report-card mb-4">
  <div class="card-header">Gerar Relatório por Período</div>
  <div class="card-body">
    <form asp-action="GerarRelatorio" asp-controller="Carteira" method="get" class="row g-3">
      <input type="hidden" name="id" value="@Model.CarteiraId" />
      <div class="col-md-4">
        <label for="dataInicio" class="form-label">Data Início</label>
        <input type="date" id="dataInicio" name="dataInicio" class="form-control" required />
      </div>
      <div class="col-md-4">
        <label for="dataFim" class="form-label">Data Fim</label>
        <input type="date" id="dataFim" name="dataFim" class="form-control" required />
      </div>
      <div class="col-md-4 d-flex align-items-end">
        <button type="submit" class="btn btn-success w-100">
          <i class="fas fa-chart-line me-1"></i> Gerar Relatório
        </button>
      </div>
    </form>
  </div>
</div>

@* Filtros de pesquisa server-side (always visible for Selenium tests) *@
<div style="background:#ffeeba;color:#856404;padding:8px 12px;border-radius:6px;margin-bottom:12px;font-size:0.95em;">
  <b>[DEBUG]</b> Filter form rendered.<br>
  Designação: <code>name="designacao"</code>, id: <code>designacaoInput</code><br>
  Tipo: <code>name="tipo"</code>, id: <code>tipoSelect</code><br>
  Montante: <code>name="montanteAplicado"</code>, id: <code>montanteInput</code><br>
  Filtrar button: <code>id="filtrarBtn"</code>
</div>

<!-- Always visible filter form for Selenium test mode (debug) -->
@if (Context.Request.Query["testmode"] == "1")
{
    <div style="background:#ffeeba;color:#856404;padding:8px 12px;border-radius:6px;margin-bottom:12px;font-size:0.95em;">
        <b>[DEBUG]</b> Filter form rendered (testmode=1).<br>
        Designação: <code>name="designacao"</code>, id: <code>designacaoInput</code><br>
        Tipo: <code>name="tipo"</code>, id: <code>tipoSelect"</code><br>
        Montante: <code>name="montanteAplicado"</code>, id: <code>montanteInput</code><br>
        Filtrar button: <code>id="filtrarBtn"</code>
    </div>
}

@* --- DEBUG: Always show filter form and highlight fields in testmode=1 for Selenium --- *@
@if (Context.Request.Query["testmode"] == "1")
{
    <div style="background:#ffeeba;color:#856404;padding:8px 12px;border-radius:6px;margin-bottom:12px;font-size:0.95em;z-index:9999;position:relative;">
        <b>[DEBUG]</b> Filter form is rendered and visible (testmode=1).<br>
        <b>Designação:</b> <code>name="designacao"</code>, id: <code>designacaoInput</code><br>
        <b>Tipo:</b> <code>name="tipo"</code>, id: <code>tipoSelect</code><br>
        <b>Montante:</b> <code>name="montanteAplicado"</code>, id: <code>montanteInput</code><br>
        <b>Filtrar button:</b> <code>id="filtrarBtn"</code><br>
        <b>Limpar button:</b> <code>id="limparBtn"</code><br>
        <span style="color:#b94a48;">If Selenium cannot find these fields, check for overlays or CSS issues.</span>
    </div>
    <style>
        /* Force filter form and fields to be visible and on top in testmode */
        .filter-card, .filter-card * {
            display: block !important;
            visibility: visible !important;
            opacity: 1 !important;
            position: relative !important;
            z-index: 9999 !important;
            pointer-events: auto !important;
        }
        #designacaoInput, #tipoSelect, #montanteInput, #filtrarBtn, #limparBtn {
            outline: 2px solid #ff9800 !important;
            background: #fffbe6 !important;
        }
    </style>
}

<div class="card filter-card mb-4">
  <div class="card-header">Filtrar Ativos</div>
  <div class="card-body">
    <form asp-action="Index" method="get" class="row g-3 align-items-end">
      <input type="hidden" name="id" value="@Model.CarteiraId" />
      <div class="col-md-4">
        <label class="form-label">Designação</label>
        <input id="designacaoInput" name="designacao"
               value="@(ViewData["designacao"] as string ?? "")"
               type="text" class="form-control" placeholder="Pesquisar..." />
      </div>
      <div class="col-md-3">
        <label class="form-label">Tipo</label>
        <select id="tipoSelect" name="tipo" class="form-select">
          <option value="">Todos</option>
          @if ((ViewData["tipo"] as string) == "DepositoPrazo")
          {
              <option value="DepositoPrazo" selected>
                Depósito a Prazo
              </option>
          }
          else
          {
              <option value="DepositoPrazo">
                Depósito a Prazo
              </option>
          }
          @if((ViewData["tipo"] as string) == "FundoInvestimento")
          {
              <option value="FundoInvestimento" selected>Fundo de Investimento</option>
          }
          else
          {
              <option value="FundoInvestimento">Fundo de Investimento</option>
          }
          @if((ViewData["tipo"] as string) == "ImovelArrendado")
          {
            <option value="ImovelArrendado" selected>
              Imóvel Arrendado
            </option>
          }
          else
          {
            <option value="ImovelArrendado">
              Imóvel Arrendado
            </option>
          }
        </select>
      </div>
      <div class="col-md-3">
        <label class="form-label">Montante ≥</label>
        <input id="montanteInput" name="montanteAplicado" type="number" step="0.01"
               value="@(ViewData["montanteAplicado"] ?? "")"
               class="form-control" placeholder="€ mínimo" />
      </div>
      <div class="col-md-2 d-grid">
        <button id="filtrarBtn" type="submit" class="btn btn-primary">
          <i class="fas fa-filter me-1"></i> Filtrar
        </button>
        <a id="limparBtn" asp-action="Index" asp-route-id="@Model.CarteiraId" class="btn btn-outline-secondary mt-1">
          Limpar
        </a>
      </div>
    </form>
  </div>
</div>

@if (!iniciais.Any())
{
  <div class="alert alert-warning">
    Ainda não tens ativos na carteira. <a asp-action="AtivosCatalogo">Adiciona alguns!</a>
  </div>
}
else
{
  @* Tabela de ativos *@
  <div class="card table-card">
    <div class="card-header"><h5 class="mb-0">Seus Ativos</h5></div>
    <div class="card-body p-0">
      <div class="table-responsive">
        <table class="table table-striped table-hover mb-0">
          <thead class="bg-light">
            <tr>
              <th>Designação</th>
              <th>Tipo</th>
              <th>Duração</th>
              <th>Início</th>
              <th>Valor Inicial</th>
              <th>Valor Atual</th>
              <th>Expectativa</th>
              <th>Ações</th>
            </tr>
          </thead>
          <tbody id="ativosTableBody">
            @foreach (var ativo in Model.Ativofinanceiros)
            {
              var fundo = ativo.Fundoinvestimento;
              var atual = fundo != null
                  ? FundoInvestimentoService.CalcularValorAtualComJuros(fundo, ativo)
                  : ativo.Depositoprazo?.Valoratual
                    ?? ImovelService.CalcularValorAtualComRendimentos(ativo.Imovelarrendado, ativo);
              <tr>
                <td>
                  @(ativo.Depositoprazo?.Titular
                    ?? fundo?.Nome
                    ?? ativo.Imovelarrendado?.Designacao
                    ?? "—")
                </td>
                <td>
                  <span class="badge bg-secondary badge-type">
                    @(ativo.Depositoprazo != null ? "Prazo"
                      : fundo != null ? "Fundo" : "Imóvel")
                  </span>
                </td>
                <td>@ativo.Duracaomeses mês@(ativo.Duracaomeses > 1 ? "es" : "")</td>
                <td>@ativo.Datainicio?.ToString("dd/MM/yyyy")</td>
                <td>
                  @(((ativo.Depositoprazo?.Valorinicial
                     ?? fundo?.Montanteinvestido
                     ?? ativo.Imovelarrendado?.Valorimovel) ?? 0m).ToString("C"))
                </td>
                <td>@atual.ToString("C")</td>
                <td>
                  @{
                    decimal exp = 0;
                    string per = "";
                    if (ativo.Depositoprazo != null) {
                      var taxa = ativo.Depositoprazo.Taxajuroanual/100m;
                      var meses = ativo.Duracaomeses ?? 0;
                      exp = ativo.Depositoprazo.Valorinicial*taxa*meses/12m*(1-0.28m);
                      per = meses>=12 ? $"{meses/12} ano(s)" : $"{meses} mes(es)";
                    } else if (fundo!=null) {
                      var taxa = fundo.Taxajuropdefeito/100m;
                      var anos = Math.Ceiling((double)(ativo.Duracaomeses??0)/12);
                      exp = atual*(decimal)Math.Pow((double)(1+taxa),(int)anos)-atual;
                      per = $"{(int)anos} ano(s)";
                    } else {
                      exp = ImovelService.CalcularExpectativaRendimentoAnual(ativo.Imovelarrendado, ativo);
                      per = "ano";
                    }
                  }
                  <span class="@(exp>=0 ? "text-success" : "text-danger")">
                    @(exp>=0 ? "+" : "")@exp.ToString("C") <small>@per</small>
                  </span>
                </td>
                <td>
                  <a asp-action="Remover" asp-route-id="@ativo.AtivofinanceiroId"
                     class="btn btn-sm btn-danger">
                    <i class="fas fa-trash-alt"></i>
                  </a>
                </td>
              </tr>
            }
          </tbody>
        </table>
      </div>
    </div>
  </div>
}

@section Scripts {
  <script>
    document.addEventListener('DOMContentLoaded', function(){
      const input = document.getElementById('designacaoInput');
      const rows = document.querySelectorAll('#ativosTableBody tr');
      input.addEventListener('input', () => {
        const term = input.value.trim().toLowerCase();
        rows.forEach(tr => {
          const txt = tr.cells[0].textContent.toLowerCase();
          tr.style.display = txt.includes(term) ? '' : 'none';
        });
      });
    });
  </script>
}
