@model TrabalhoES2.Models.Carteira
@{
    ViewData["Title"] = "Relatório da Carteira";
    var utilizador = Model.Utilizador;
    var ativos = (List<dynamic>)ViewBag.AtivosRelatorio ?? new List<dynamic>();
    var performanceMensal = ViewBag.PerformanceMensal as List<dynamic> ?? new List<dynamic>();
    bool hasAtivos = ativos.Any();
}

<style>
  .header-title {
    color: #17a2b8;
    text-shadow: 1px 1px 2px rgba(0,0,0,.1);
    margin-bottom: 1rem;
  }
  .user-info {
    margin-bottom: 2rem;
  }
  .asset-card {
    border-radius: 1rem;
    box-shadow: 0 4px 12px rgba(0,0,0,.05);
    transition: transform .2s;
  }
  .asset-card:hover {
    transform: translateY(-4px);
  }
  .totals .list-group-item {
    background: linear-gradient(90deg, #84fab0, #8fd3f4);
    color: #fff;
    font-weight: 600;
    border: none;
    border-radius: .5rem;
    margin-bottom: .5rem;
  }
  .period p {
    margin: .25rem 0;
  }
  .performance-section {
    margin: 2rem 0;
  }
  .performance-header {
    font-weight: 600;
    color: #218838;
    margin-bottom: 1.2rem;
    letter-spacing: 0.03rem;
  }
  .performance-controls {
    margin-bottom: 1.2rem;
  }
</style>

<h1 class="header-title">@ViewData["Title"]</h1>

<div class="user-info">
  <h4>Utilizador: <strong>@utilizador?.Nome</strong> (@utilizador?.Email)</h4>
  <h5>Carteira ID: <span class="badge bg-info">@Model.CarteiraId</span></h5>
</div>

<hr />

@if (hasAtivos)
{
  <div class="row mb-4">
    @foreach (var ativo in ativos)
    {
      <div class="col-md-4 mb-4">
        <div class="card asset-card h-100">
          <div class="card-header bg-light">
            <h5 class="mb-0">@ativo.TipoAtivo</h5>
          </div>
          <div class="card-body">
            <ul class="list-group list-group-flush">
              <li class="list-group-item"><strong>Lucro Bruto:</strong> @ativo.LucroBruto.ToString("C")</li>
              <li class="list-group-item"><strong>Impostos:</strong> @ativo.Impostos.ToString("C")</li>
              <li class="list-group-item"><strong>Lucro Líquido:</strong> @ativo.LucroLiquido.ToString("C")</li>
            </ul>
          </div>
        </div>
      </div>
    }
  </div>
}
else
{
  <div class="alert alert-warning">
    Esta carteira não contém ativos financeiros.
  </div>
}

<hr />

<h4>Totais:</h4>
<div class="totals mb-4">
  <ul class="list-group p-2">
    <li class="list-group-item">Lucro Total Bruto: @ViewBag.LucroTotalBruto.ToString("C")</li>
    <li class="list-group-item">Impostos Totais: @ViewBag.ImpostosTotais.ToString("C")</li>
    <li class="list-group-item">Lucro Total Líquido: @ViewBag.LucroTotalLiquido.ToString("C")</li>
    <li class="list-group-item">Lucro Mensal Médio Bruto: @ViewBag.LucroMensalMedioBruto.ToString("C")</li>
    <li class="list-group-item">Lucro Mensal Médio Líquido: @ViewBag.LucroMensalMedioLiquido.ToString("C")</li>
  </ul>
</div>

<hr />

<div class="performance-section">
  <div class="performance-header">Evolução do Saldo dos Ativos</div>
  <canvas id="performanceChart" height="100"></canvas>
</div>

@section Scripts {
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
        // Dados vindos do ViewBag.PerformanceMensal (serializado em JSON)
        const dataServer = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.PerformanceMensal ?? new List<dynamic>()));

        // Dados separados por tipo de ativo
        const dataDeposito = dataServer.filter(x => x.TipoAtivo === "Depósito a Prazo");
        const dataImovel = dataServer.filter(x => x.TipoAtivo === "Imóvel Arrendado");
        const dataFundo = dataServer.filter(x => x.TipoAtivo === "Fundo de Investimento");

        // Extrai meses únicos e ordena
        const meses = [...new Set([...dataDeposito, ...dataImovel, ...dataFundo].map(x => x.Mes))].sort();

        // Preenche os saldos por mês (null se não houver valor nesse mês)
        const saldosDeposito = meses.map(mes => {
            const item = dataDeposito.find(x => x.Mes === mes);
            return item ? item.Valor : null;
        });
        const saldosImovel = meses.map(mes => {
            const item = dataImovel.find(x => x.Mes === mes);
            return item ? item.Valor : null;
        });
        const saldosFundo = meses.map(mes => {
          const item = dataFundo.find(x => x.Mes === mes);
          return item ? item.Valor : null;
        });

        // Cria o gráfico
        const ctx = document.getElementById('performanceChart').getContext('2d');
        let chart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: meses,
            datasets: [
              {
                label: "Depósito a Prazo",
                data: saldosDeposito,
                fill: false,
                tension: 0.2,
                borderWidth: 2,
                borderColor: "#e84848",
                backgroundColor: "#e84848"
              },
              {
                label: "Imóvel Arrendado",
                data: saldosImovel,
                fill: false,
                tension: 0.2,
                borderWidth: 2,
                borderColor: "#1b7b34",
                backgroundColor: "#1b7b34"
              },
              {
                label: "Fundo de Investimento",
                data: saldosFundo,
                fill: false,
                tension: 0.2,
                borderWidth: 2,
                borderColor: "#2b4cb3",
                backgroundColor: "#2b4cb3"
              }
            ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: 'Evolução do Saldo dos Ativos' }
                },
                scales: {
                    y: {
                        beginAtZero: false,
                        ticks: {
                            callback: function (value) {
                                return value != null ? value.toLocaleString('pt-PT', { style: 'currency', currency: 'EUR' }) : '';
                            }
                        }
                    }
                }
            }
        });
    </script>
}