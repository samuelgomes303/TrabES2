@model TrabalhoES2.Models.Carteira

@{
    ViewData["Title"] = "Relatório da Carteira";
    var utilizador = Model.Utilizador;
    var ativos = (List<dynamic>)ViewBag.AtivosRelatorio ?? new List<dynamic>();
    var performanceMensal = ViewBag.PerformanceMensal as List<dynamic> ?? new List<dynamic>();
}

<h1>@ViewData["Title"]</h1>

<h4>Utilizador: @utilizador?.Nome (@utilizador?.Email)</h4>
<h5>Carteira ID: @Model.CarteiraId</h5>

<hr />

@if (ativos.Any())
{
    <div class="row">
        @foreach (var ativo in ativos)
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    <div class="card-header">
                        <h5>@ativo.TipoAtivo</h5>
                    </div>
                    <div class="card-body">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item"><strong>Lucro Bruto:</strong> @ativo.LucroBruto.ToString("C")</li>
                            <li class="list-group-item"><strong>Impostos:</strong> @ativo.Impostos.ToString("C")</li>
                            <li class="list-group-item"><strong>Lucro Líquido:</strong> @ativo.LucroLiquido.ToString("C")</li>
                        </ul>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>Esta carteira não contém ativos financeiros.</p>
}

<hr />

<h4>Totais:</h4>
<ul class="list-group">
    <li class="list-group-item"><strong>Lucro Total Bruto:</strong> @ViewBag.LucroTotalBruto.ToString("C")</li>
    <li class="list-group-item"><strong>Impostos Totais:</strong> @ViewBag.ImpostosTotais.ToString("C")</li>
    <li class="list-group-item"><strong>Lucro Total Líquido:</strong> @ViewBag.LucroTotalLiquido.ToString("C")</li>
    <li class="list-group-item"><strong>Lucro Mensal Médio Bruto:</strong> @ViewBag.LucroMensalMedioBruto.ToString("C")</li>
    <li class="list-group-item"><strong>Lucro Mensal Médio Líquido:</strong> @ViewBag.LucroMensalMedioLiquido.ToString("C")</li>
</ul>

<hr />

<h4>Performance Mensal dos Ativos</h4>
<div class="mb-3">
    <label for="tipoLucro" class="form-label">Tipo de Performance</label>
    <select id="tipoLucro" class="form-select" style="width:auto;display:inline">
        <option value="LucroBruto">Lucro Bruto</option>
        <option value="LucroLiquido">Lucro Líquido</option>
        <option value="Impostos">Impostos</option>
    </select>
</div>
<canvas id="performanceChart" height="100"></canvas>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Dados vindos do ViewBag.PerformanceMensal (serializado em JSON)
        const dataServer = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.PerformanceMensal ?? new List<dynamic>()));

        // Extrai meses únicos (eixo X)
        const meses = [...new Set(dataServer.map(x => x.Mes))];

        // Extrai tipos de ativo únicos (linhas do gráfico)
        const tiposAtivo = [...new Set(dataServer.map(x => x.TipoAtivo))];

        // Função para datasets conforme a métrica
        function getDatasets(metric) {
            return tiposAtivo.map((tipo, idx) => ({
                label: tipo,
                data: meses.map(mes => {
                    const item = dataServer.find(x => x.Mes === mes && x.TipoAtivo === tipo);
                    return item ? item[metric] : 0;
                }),
                fill: false,
                tension: 0.2,
                borderWidth: 2,
                borderColor: `hsl(${idx * 60}, 70%, 50%)`,
                backgroundColor: `hsl(${idx * 60}, 70%, 50%)`
            }));
        }

        // Setup inicial
        let metric = 'LucroBruto';
        const ctx = document.getElementById('performanceChart').getContext('2d');
        let chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: meses,
                datasets: getDatasets(metric)
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: 'Performance Mensal dos Ativos' }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function (value) {
                                return value.toLocaleString('pt-PT', { style: 'currency', currency: 'EUR' });
                            }
                        }
                    }
                }
            }
        });

        // Atualiza o gráfico ao mudar a opção do select
        document.getElementById('tipoLucro').addEventListener('change', function () {
            metric = this.value;
            chart.data.datasets = getDatasets(metric);
            chart.update();
        });
    </script>
}

<hr />

<h4>Período:</h4>
<p><strong>Data Início:</strong> @ViewBag.DataInicio.ToShortDateString()</p>
<p><strong>Data Fim:</strong> @ViewBag.DataFim.ToShortDateString()</p>

